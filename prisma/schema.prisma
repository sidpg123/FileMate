// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @default(uuid())
  name               String
  email              String   @unique
  passwordHash       String
  role               String
  storageUsed        Float    @default(0) // Storage used in GB
  subscriptionExpiry DateTime
  createdAt          DateTime @default(now())
  clients            Client[]

  @@index([email])
}

model Client {
  id        String        @id @default(uuid())
  caId      String        @map("ca_id")
  name      String
  email     String?       @unique
  phone     String?
  aadharNo  String        @unique @map("aadhar_no")
  panNo     String        @unique @map("pan_no")
  address   String
  createdAt DateTime      @default(now())
  ca        User          @relation(fields: [caId], references: [id], onDelete: Cascade)
  documents Document[]
  fees      PendingFees[]

  @@index([caId])
}

model Document {
  id           String   @id @default(uuid())
  clientId     String   @map("client_id")
  fileName     String
  fileKey      String
  thumbnailKey String?
  fileType     String
  fileSize     Float
  uploadedAt   DateTime @default(now())
  client       Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
}

model PendingFees {
  id        String   @id @default(uuid())
  clientId  String   @map("client_id")
  amount    Float
  dueDate   DateTime
  status    String   @default("Pending")
  createdAt DateTime @default(now())
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
}
